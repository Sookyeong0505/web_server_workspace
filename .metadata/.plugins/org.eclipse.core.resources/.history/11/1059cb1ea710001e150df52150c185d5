package com.sh.mvc.member.controller;

import java.io.IOException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.sh.mvc.member.model.service.MemberService;
import com.sh.mvc.member.model.vo.Member;

/**
 * 컨텍스트 객체
 * - pageContext : PageContext
 * - request
 * - session
 * - application
 * 
 * 위 객체는 모두 setAttribute(String, Object), getAttribute(String): Object를 지원한다.
 * 
 * 
 * Session | Cookie
 * - http 통신의 상태관리 매커니즘
 * - 기본적으로 http 통신은 stateless하다. (한번 요청후, 응답하면 서버와의 연결이 끊어진다.)
 * - 이전의 사용자가 다음 요청시 동일한 사용자인지 구분할 수 없다. (로그인했다가 페이지 이동 시 로그인 풀려버림)
 * 
 * - Session 사용자 정보를 서버 쪽에 보관하는 기술
 * - Cookie	 사용자 정보를 클라이언트(브라우저) 쪽에 보관하는 기술
 * 
 * - 발급 및 사용과정
 * 1. 클라이언트 최초 요청(요청에 JSESSIONID 없음) 시 서버는 세션 객체 생성.
 * 2. 발급된 세션 아이디를 응답에 전송(Set-Cookie: 세션ID값)
 * 3. 클라이언트는 JSESSIONID:세션ID이로 쿠키 저장
 * 4. 클라이언트는 다음 요청부터 매번 요청헤더에 Cookie 항목으로 JSESSIONID를 함께 요청함.
 * 5. 서버에서는 JSESSIONID를 검증 후 해당 session 객체를 사용하도록 해줌.
 * 
 * - Session 객체는 클라이언트 별로 생성해 관리한다.
 * - 기본적으로 세션 객체 유효시간은 마지막 요청으로부터 30분이다.
 * 
 * - 유효 시간 설정은 web.xml에서 수정 가능 session-config > session
 * 
 * - request.getSession(create:boolean)
 * - 세션이 유효하지 않은 경우 생성여부
 * - true(기본값) : 세션id가 유효하지 않거나 없는 경우 세션 객체를 새로 생성해서 반환
 * - false : 세션id가 유효하지 않거나 없는 경우 null을 반환 (로그아웃에 사용)
 * 
 * 
 */
@WebServlet("/member/login")
public class MemberLoginServlet extends HttpServlet {
   private static final long serialVersionUID = 1L;
   
   private final MemberService memberService = new MemberService();

   /**
    * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
    */
   protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
      //브라우저에서 요청을해야 servlet에서 응답
      
      //0. 인코딩처리
      request.setCharacterEncoding("utf-8");
      
      //1. 사용자 입력값(memberId, password)
      String memberId = request.getParameter("memberId");
      String password = request.getParameter("password");
      String saveId = request.getParameter("saveId");
      // saveId를 쿠키로 만들어서 저장하기
      
      
//      System.out.println("memberId = " + memberId);
//      System.out.println("password = " + password);
      
      //2. 업무로직 - 로그인확인 
      // 아이디로 db에서 조회 select * from member where member_id = ?
      // member객체가 null이 아니면서 비밀번호가 일치하면 로그인성공
      // member객체가 null이거나 비밀번호가 일치하지 않으면 로그인실패
      Member member = memberService.findByID(memberId);
//      System.out.println("member@servlet = " + member);
      
      HttpSession session = request.getSession();
//      System.out.println(session.getId());
      
      if(member != null && password.equals(member.getPassword())) {
    	  // 로그인 성공
    	  session.setAttribute("loginMember", member);
//    	  session.setAttribute("msg", "로그인에 성공했습니다.");
    	  
    	  // 아이디 저장 쿠기처리
    	  // - Path : 쿠키를 사용할 url. 서버전송 시 부모경로만 지정.
    	  // - Session Cookie : setMaxAge 설정하지 않은 경우. 접속한 동안만 클라이언트에 보관
    	  // - Persistant Cookie : setMaxAge 설정한 경우
    	  Cookie cookie = new Cookie("saveId", memberId);
    	  cookie.setPath(request.getContextPath()); // 쿠키를 사용할 url
    	  cookie.setMaxAge(60*60*24*7); // 쿠키 유효기간 7일
    	  response.addCookie(cookie); // 응답 헤더 Set-Cookie : saveId=honggd
    	  
    	  
      } else {
    	  // 로그인 실패
    	  session.setAttribute("msg", "아이디 또는 비밀번호가 일치하지 않습니다.");
      }

      //3. 응답처리 (리다이렉트)
      response.sendRedirect(request.getContextPath() + "/"); // redirect를 통한 url 변경
      
      
//      RequestDispatcher reqDispatcher = request.getRequestDispatcher("/index.jsp");
//      reqDispatcher.forward(request, response);
      
      
   }

}